// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "apps-management": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/Microkubes/microservice-apps-management/design
// --out=$(GOPATH)/src/github.com/Microkubes/microservice-apps-management
// --version=v1.3.1

package app

import (
	"context"
	"github.com/keitaroinc/goa"
	"github.com/keitaroinc/goa/cors"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// AppsController is the controller interface for the Apps actions.
type AppsController interface {
	goa.Muxer
	DeleteApp(*DeleteAppAppsContext) error
	Get(*GetAppsContext) error
	GetMyApps(*GetMyAppsAppsContext) error
	GetUserApps(*GetUserAppsAppsContext) error
	RegenerateClientSecret(*RegenerateClientSecretAppsContext) error
	RegisterApp(*RegisterAppAppsContext) error
	UpdateApp(*UpdateAppAppsContext) error
	VerifyApp(*VerifyAppAppsContext) error
}

// MountAppsController "mounts" a Apps resource controller on the given service.
func MountAppsController(service *goa.Service, ctrl AppsController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/:appId", ctrl.MuxHandler("preflight", handleAppsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/my", ctrl.MuxHandler("preflight", handleAppsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/users/:userId/all", ctrl.MuxHandler("preflight", handleAppsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/:appId/regenerate-secret", ctrl.MuxHandler("preflight", handleAppsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/", ctrl.MuxHandler("preflight", handleAppsOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/verify", ctrl.MuxHandler("preflight", handleAppsOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteAppAppsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.DeleteApp(rctx)
	}
	h = handleAppsOrigin(h)
	service.Mux.Handle("DELETE", "/:appId", ctrl.MuxHandler("deleteApp", h, nil))
	service.LogInfo("mount", "ctrl", "Apps", "action", "DeleteApp", "route", "DELETE /:appId")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetAppsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Get(rctx)
	}
	h = handleAppsOrigin(h)
	service.Mux.Handle("GET", "/:appId", ctrl.MuxHandler("get", h, nil))
	service.LogInfo("mount", "ctrl", "Apps", "action", "Get", "route", "GET /:appId")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetMyAppsAppsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetMyApps(rctx)
	}
	h = handleAppsOrigin(h)
	service.Mux.Handle("GET", "/my", ctrl.MuxHandler("getMyApps", h, nil))
	service.LogInfo("mount", "ctrl", "Apps", "action", "GetMyApps", "route", "GET /my")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetUserAppsAppsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetUserApps(rctx)
	}
	h = handleAppsOrigin(h)
	service.Mux.Handle("GET", "/users/:userId/all", ctrl.MuxHandler("getUserApps", h, nil))
	service.LogInfo("mount", "ctrl", "Apps", "action", "GetUserApps", "route", "GET /users/:userId/all")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewRegenerateClientSecretAppsContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.RegenerateClientSecret(rctx)
	}
	h = handleAppsOrigin(h)
	service.Mux.Handle("PUT", "/:appId/regenerate-secret", ctrl.MuxHandler("regenerateClientSecret", h, nil))
	service.LogInfo("mount", "ctrl", "Apps", "action", "RegenerateClientSecret", "route", "PUT /:appId/regenerate-secret")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewRegisterAppAppsContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AppPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.RegisterApp(rctx)
	}
	h = handleAppsOrigin(h)
	service.Mux.Handle("POST", "/", ctrl.MuxHandler("registerApp", h, unmarshalRegisterAppAppsPayload))
	service.LogInfo("mount", "ctrl", "Apps", "action", "RegisterApp", "route", "POST /")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateAppAppsContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AppPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.UpdateApp(rctx)
	}
	h = handleAppsOrigin(h)
	service.Mux.Handle("PUT", "/:appId", ctrl.MuxHandler("updateApp", h, unmarshalUpdateAppAppsPayload))
	service.LogInfo("mount", "ctrl", "Apps", "action", "UpdateApp", "route", "PUT /:appId")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewVerifyAppAppsContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*AppCredentialsPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.VerifyApp(rctx)
	}
	h = handleAppsOrigin(h)
	service.Mux.Handle("POST", "/verify", ctrl.MuxHandler("verifyApp", h, unmarshalVerifyAppAppsPayload))
	service.LogInfo("mount", "ctrl", "Apps", "action", "VerifyApp", "route", "POST /verify")
}

// handleAppsOrigin applies the CORS response headers corresponding to the origin.
func handleAppsOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "OPTIONS")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalRegisterAppAppsPayload unmarshals the request body into the context request data Payload field.
func unmarshalRegisterAppAppsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &appPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateAppAppsPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateAppAppsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &appPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalVerifyAppAppsPayload unmarshals the request body into the context request data Payload field.
func unmarshalVerifyAppAppsPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &appCredentialsPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// SwaggerController is the controller interface for the Swagger actions.
type SwaggerController interface {
	goa.Muxer
	goa.FileServer
}

// MountSwaggerController "mounts" a Swagger resource controller on the given service.
func MountSwaggerController(service *goa.Service, ctrl SwaggerController) {
	initService(service)
	var h goa.Handler

	h = ctrl.FileHandler("/swagger-ui/*filepath", "swagger-ui/dist")
	service.Mux.Handle("GET", "/swagger-ui/*filepath", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Swagger", "files", "swagger-ui/dist", "route", "GET /swagger-ui/*filepath")

	h = ctrl.FileHandler("/swagger.json", "swagger/swagger.json")
	service.Mux.Handle("GET", "/swagger.json", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Swagger", "files", "swagger/swagger.json", "route", "GET /swagger.json")

	h = ctrl.FileHandler("/swagger-ui/", "swagger-ui/dist/index.html")
	service.Mux.Handle("GET", "/swagger-ui/", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Swagger", "files", "swagger-ui/dist/index.html", "route", "GET /swagger-ui/")
}
