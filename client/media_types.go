// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "apps-management": Application Media Types
//
// Command:
// $ goagen
// --design=github.com/JormungandrK/microservice-apps-management/design
// --out=$(GOPATH)/src/github.com/JormungandrK/microservice-apps-management
// --version=v1.2.0-dirty

package client

import (
	"github.com/goadesign/goa"
	"net/http"
	"unicode/utf8"
)

// apps media type (default view)
//
// Identifier: application/vnd.goa.apps+json; view=default
type Apps struct {
	// Description of the app
	Description string `form:"description" json:"description" xml:"description"`
	// App domain
	Domain string `form:"domain" json:"domain" xml:"domain"`
	// Unique app ID
	ID string `form:"id" json:"id" xml:"id"`
	// Name of the app
	Name string `form:"name" json:"name" xml:"name"`
	// User ID
	Owner string `form:"owner" json:"owner" xml:"owner"`
	// Time when app is registered
	RegisteredAt int `form:"registeredAt" json:"registeredAt" xml:"registeredAt"`
}

// Validate validates the Apps media type instance.
func (mt *Apps) Validate() (err error) {
	if mt.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "id"))
	}
	if mt.Name == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "name"))
	}
	if mt.Description == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "description"))
	}
	if mt.Domain == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "domain"))
	}
	if mt.Owner == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "owner"))
	}

	if utf8.RuneCountInString(mt.Description) > 300 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.description`, mt.Description, utf8.RuneCountInString(mt.Description), 300, false))
	}
	if err2 := goa.ValidateFormat(goa.FormatURI, mt.Domain); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`response.domain`, mt.Domain, goa.FormatURI, err2))
	}
	if utf8.RuneCountInString(mt.Name) > 50 {
		err = goa.MergeErrors(err, goa.InvalidLengthError(`response.name`, mt.Name, utf8.RuneCountInString(mt.Name), 50, false))
	}
	return
}

// DecodeApps decodes the Apps instance encoded in resp body.
func (c *Client) DecodeApps(resp *http.Response) (*Apps, error) {
	var decoded Apps
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeErrorResponse decodes the ErrorResponse instance encoded in resp body.
func (c *Client) DecodeErrorResponse(resp *http.Response) (*goa.ErrorResponse, error) {
	var decoded goa.ErrorResponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}
